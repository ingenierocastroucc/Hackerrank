/************************************************************************************************************
 ************************************************************************************************************
 * Unidad        : Palindromo                                                                      
 * Descripcion   : realiza el calculo de un palindromo
 * Autor         : Pedro Castro                                                                                    
 * Fecha         : <04/02/2022>   
 ***********************************************************************************************************/
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Solucion
{

    // funcion que completa el aplindromo con el valor mas alto.
    static string highestValuePalindrome(string s, int n, int k)
    {
        if (n == 1 && k == 1)
        { //manejo de los casos especiales
            return "9";
        }
        //calculo de pares de numeros diferentes
        var diferencial = 0;
        var inicio = 0;
        var finalizacion = s.Length - 1;
        var diccionario = new Dictionary<int, int>();
        while (inicio <= finalizacion)
        {
            if (!s[inicio].Equals(s[finalizacion]))
            {
                diferencial++;
                diccionario.Add(inicio, finalizacion);
            }
            inicio++;
            finalizacion--;
        }
        //Si es imposible formar un palindromo mas alto
        if (diferencial > k)
        {
            return "-1";
        }
        //creacion del palindromo
        var cl = s.ToCharArray();
        foreach (var p in diccionario)
        {
            var r = Math.Max((int)cl[p.Key], (int)cl[p.Value]);
            cl[p.Key] = (char)r;
            cl[p.Value] = (char)r;
            k--;
        }
        //calculo del palindromo
        var st = 0;
        var e = s.Length - 1;
        while (k > 0 && st <= e)
        {
            if (diccionario.ContainsKey(st) && k - 1 >= 0 && !cl[st].Equals('9'))
            {
                k--;
                cl[st] = '9';
                cl[e] = '9';
            }
            if (!diccionario.ContainsKey(st) && k - 2 >= 0 && !cl[st].Equals('9'))
            {
                k -= 2;
                cl[st] = '9';
                cl[e] = '9';
            }
            st++;
            e--;
        }
        //condicional para el remplazo de valores
        if (k == 1 && s.Length % 2 == 1)
        {
            cl[s.Length % 2 + 1] = '9';
        }
        //resultado
        var res = new StringBuilder();
        foreach (var c in cl)
        {
            res.Append(c.ToString());
        }
        return res.ToString();
    }

    static void Main(string[] args)
    {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        string[] nk = Console.ReadLine().Split(' ');

        int n = Convert.ToInt32(nk[0]);

        int k = Convert.ToInt32(nk[1]);

        string s = Console.ReadLine();

        string result = highestValuePalindrome(s, n, k);

        textWriter.WriteLine(result);

        textWriter.Flush();
        textWriter.Close();
    }
}
